# Execution begins at address 0 
	.pos 0 
init:	
    irmovl Stack, %esp  	# Set up stack pointer  
	call Main		# Execute Main program

.align 4
# Source block
src:
    .long 0x00a
    .long 0x0b0
    .long 0xc00
# Destination
dest:
    .long 0x111
    .long 0x222
    .long 0x333

Main:	
    pushl %ebp
	rrmovl %esp,%ebp          # Set up pop pointer
	irmovl $3,%eax  
	pushl %eax  # push len
    irmovl src,%eax
    pushl %eax   # push src
    irmovl dest,%eax
    pushl %eax  # push dest
    xorl %eax,%eax  # set eax as result
	call copy_block
    halt	# Terminate the program

# copy_block
copy_block:	
    pushl %ebp
	rrmovl %esp,%ebp
	mrmovl 16(%ebp), %ebx  # %ebx = len
    mrmovl 12(%ebp), %ecx  # %ecx = src
    mrmovl 8(%ebp), %edx   # %edx = dest

Loop:
    mrmovl (%ecx), %esi    # val = *src
    irmovl $4,%edi
    addl %edi, %ecx    # *src += 1
    rmmovl %esi, (%edx)    # *dest = val
    addl %edi,%edx     # *val += 1
    xorl %esi, %eax      # result ^= val
    irmovl $-1, %edi
    addl %edi, %ebx      # len -= 1
    andl %ebx, %ebx      # len > 0?
    jne Loop

End:	
    rrmovl %ebp,%esp
	popl %ebp
	ret


# The stack starts here and grows to lower addresses
	.pos 0x200	
Stack:	 

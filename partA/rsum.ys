# 519021911174, Haoyuan Tian
# 519021910529, Qi Liu

# Execution begins at address 0 
	.pos 0 
init:	
    irmovl Stack, %esp  	# Set up stack pointer  
    irmovl Stack, %ebp      # Set up stack frame pointer
	call Main		        # Execute Main program
    halt                    # Terminate the program

# Sample linked list
    .align 4
    ele1:
        .long 0x00a
        .long ele2
    ele2:
        .long 0x0b0
        .long ele3
    ele3:
        .long 0xc00
        .long 0

Main:
    pushl %ebp
    rrmovl %esp, %ebp
	irmovl ele1,%eax	
	pushl %eax              # Push ele1
	call rsum_list
    rrmovl %ebp, %esp       # Restore the frame pointer
	popl %ebp
	ret

#int rsum_list(list_ptr ls)
rsum_list:
    pushl %ebp
    rrmovl %esp, %ebp
    pushl %ebx
    xorl %eax, %eax         # sum = 0
    mrmovl 8(%ebp), %edx    # get ls
    andl %edx, %edx         # ls == NULL?
    je End                  # If so, goto End
    mrmovl (%edx), %ebx     # mov ls->val to %ebx
    mrmovl 4(%edx), %eax
    pushl %eax              # push ls->next
    call rsum_list
    addl %ebx, %eax         # ret = val + ret
    popl %edx               # eat para

End:	
    popl %ebx               # Restore the register
    rrmovl %ebp, %esp
	popl %ebp
	ret

# The stack starts here and grows to lower addresses
	.pos 0x200	
Stack:

# Execution begins at address 0 
	.pos 0 
init:	
    irmovl Stack, %esp  	# Set up stack pointer  
	call Main		# Execute Main program


# Sample linked list
    .align 4
    ele1:
        .long 0x00a
        .long ele2
    ele2:
        .long 0x0b0
        .long ele3
    ele3:
        .long 0xc00
        .long 0

Main:	
	rrmovl %esp,%ebp          # Set up pop pointer
	irmovl ele1,%eax	
	pushl %eax		# Push ele1
	call Sum_list
    halt	# Terminate the program

# Sum_list func
Sum_list:	
    pushl %ebp
	rrmovl %esp,%ebp
	mrmovl 8(%ebp),%ecx 	# %ecx = ls, for now it's ele1
	xorl %eax,%eax		# sum = 0

Loop:	
    mrmovl (%ecx),%edx	 # get ls->val
	addl %edx,%eax          # add to sum
	mrmovl $4(%ecx),%ecx          # ls = ls->next
	andl %ecx,%ecx  # ecx == 0?
    jne Loop

End:	
    rrmovl %ebp,%esp
	popl %ebp
	ret


# The stack starts here and grows to lower addresses
	.pos 0x200	
Stack:	 
